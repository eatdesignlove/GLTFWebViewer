import { decodeBinaryUtf8 } from "./utils/decodeBinaryUtf8";
import { loadGltf } from "./loadGltf.old";

export function loadGlb(glb, device, done, options) {
  const dataView = new DataView(glb);
  // Read header
  const magic = dataView.getUint32(0, true);
  if (magic !== 0x46546c67) {
    done(
      "Invalid magic number found in glb header. Expected 0x46546C67, found 0x" +
        magic.toString(16),
    );
    return;
  }
  const version = dataView.getUint32(4, true);
  if (version !== 2) {
    done(
      "Invalid version number found in glb header. Expected 2, found " +
        version,
    );
    return;
  }
  const length = dataView.getUint32(8, true);
  // Read JSON chunk
  let chunkLength = dataView.getUint32(12, true);
  let chunkType = dataView.getUint32(16, true);
  if (chunkType !== 0x4e4f534a) {
    done(
      "Invalid chunk type found in glb file. Expected 0x4E4F534A, found 0x" +
        chunkType.toString(16),
    );
    return;
  }
  const jsonData = new Uint8Array(glb, 20, chunkLength);
  const gltf = JSON.parse(decodeBinaryUtf8(jsonData));
  // Read the binary buffers
  const buffers = [];
  let byteOffset = 20 + chunkLength;
  while (byteOffset < length) {
    chunkLength = dataView.getUint32(byteOffset, true);
    chunkType = dataView.getUint32(byteOffset + 4, true);
    if (chunkType !== 0x004e4942) {
      done(
        "Invalid chunk type found in glb file. Expected 0x004E4942, found 0x" +
          chunkType.toString(16),
      );
      return;
    }
    const buffer = glb.slice(byteOffset + 8, byteOffset + 8 + chunkLength);
    buffers.push(buffer);
    byteOffset += chunkLength + 8;
  }
  options = options || {};
  options.buffers = buffers;
  loadGltf(gltf, device, done, options);
}
